{"version":3,"sources":["../src/ParseBookmarksTool.js"],"names":["ParseBookmarksTool","constructor","container","toolName","log","debug","run","argv","options","string","boolean","alias","default","args","version","info","fullVersion","help","_","Error","bookmarkHtml","fsPromise","readFile","encoding","asyncParseBookmarks","util","promisify","parse","items","DOMParser","xmldom","flatten","readable","JSON","stringify","writeable","fs","createWriteStream","process","stdout"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,kBAAN,CAAyB;AAC9BC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,SAAKC,QAAL,GAAgBD,SAAS,CAACC,QAA1B;AACA,SAAKC,GAAL,GAAWF,SAAS,CAACE,GAArB;AACA,SAAKC,KAAL,GAAaH,SAAS,CAACG,KAAvB;AACD;;AAED,QAAMC,GAAN,CAAUC,IAAV,EAAgB;AACd,UAAMC,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,EADM;AAEdC,MAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,CAFK;AAGdC,MAAAA,KAAK,EAAE,EAHO;AAIdC,MAAAA,OAAO,EAAE;AAJK,KAAhB;AAOA,UAAMC,IAAI,GAAG,uBAAUN,IAAV,EAAgBC,OAAhB,CAAb;AAEA,SAAKH,KAAL,GAAaQ,IAAI,CAACR,KAAlB;;AAEA,QAAIQ,IAAI,CAACC,OAAT,EAAkB;AAChB,WAAKV,GAAL,CAASW,IAAT,CAAe,IAAGC,oBAAY,EAA9B;AACA,aAAO,CAAP;AACD;;AAED,QAAIH,IAAI,CAACI,IAAT,EAAe;AACb,WAAKb,GAAL,CAASW,IAAT,CAAe;SACZ,KAAKZ,QAAS;;;;;CADjB;AAOA,aAAO,CAAP;AACD;;AAED,QAAI,CAACU,IAAI,CAACK,CAAL,CAAO,CAAP,CAAL,EAAgB;AACd,YAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED,UAAMC,YAAY,GAAG,MAAMC,kBAAUC,QAAV,CAAmBT,IAAI,CAACK,CAAL,CAAO,CAAP,CAAnB,EAA8B;AACvDK,MAAAA,QAAQ,EAAE;AAD6C,KAA9B,CAA3B;;AAGA,UAAMC,mBAAmB,GAAGC,cAAKC,SAAL,CAAeC,KAAf,CAA5B;;AACA,UAAMC,KAAK,GAAG,oCAAeR,YAAf,EAA6B;AACzCS,MAAAA,SAAS,EAAEC,gBAAOD,SADuB;AAEzCE,MAAAA,OAAO,EAAE;AAFgC,KAA7B,CAAd;AAKA,UAAMC,QAAQ,GAAG,iCAAeC,IAAI,CAACC,SAAL,CAAeN,KAAf,CAAf,CAAjB;AACA,UAAMO,SAAS,GAAGtB,IAAI,CAACK,CAAL,CAAO,CAAP,IACdkB,YAAGC,iBAAH,CAAqBxB,IAAI,CAACK,CAAL,CAAO,CAAP,CAArB,CADc,GAEdoB,OAAO,CAACC,MAFZ;AAIA,UAAM,gCAAcP,QAAd,EAAwBG,SAAxB,CAAN;AAEA,WAAO,CAAP;AACD;;AAxD6B","sourcesContent":["import parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport fs from \"fs\"\nimport fsPromise from \"fs/promises\"\nimport util from \"util\"\nimport { parseBookmarks } from \"@johnls/parse-bookmarks\"\nimport { stringToStream, pipeToPromise } from \"@johnls/stream-utils\"\nimport xmldom from \"xmldom\"\n\nexport class ParseBookmarksTool {\n  constructor(container) {\n    this.toolName = container.toolName\n    this.log = container.log\n    this.debug = container.debug\n  }\n\n  async run(argv) {\n    const options = {\n      string: [],\n      boolean: [\"help\", \"version\", \"debug\"],\n      alias: {},\n      default: {},\n    }\n\n    const args = parseArgs(argv, options)\n\n    this.debug = args.debug\n\n    if (args.version) {\n      this.log.info(`v${fullVersion}`)\n      return 0\n    }\n\n    if (args.help) {\n      this.log.info(`\nUsage: ${this.toolName} [options] <bookmarks-file> [<json-file>]\n\noptions:\n  --help          Shows this help.\n  --version       Shows the tool version.\n`)\n      return 0\n    }\n\n    if (!args._[0]) {\n      throw new Error(\"Specify bookmarks file to convert\")\n    }\n\n    const bookmarkHtml = await fsPromise.readFile(args._[0], {\n      encoding: \"utf-8\",\n    })\n    const asyncParseBookmarks = util.promisify(parse)\n    const items = parseBookmarks(bookmarkHtml, {\n      DOMParser: xmldom.DOMParser,\n      flatten: true,\n    })\n\n    const readable = stringToStream(JSON.stringify(items))\n    const writeable = args._[1]\n      ? fs.createWriteStream(args._[1])\n      : process.stdout\n\n    await pipeToPromise(readable, writeable)\n\n    return 0\n  }\n}\n"],"file":"ParseBookmarksTool.js"}